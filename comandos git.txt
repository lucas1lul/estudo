git status
clear
git config --global user.name " "
git config --global user.email " "
git config --list
ls  = listar arquivos da pasta
ls -a = listar arquivos ate mesmo escondidos
git init = inicializar o repositorio git em determinada pasta (para saber se foi criada, aparece em azul "master")
git config global init defaultBranch "master" = em aspas nome a ser declarado do repositorio
exit
git add " " = para adicionar determinado arquivo na comitação
rm -fr .git/ = para remover o repositorio e pasta git (removeria ate mesmo o historico e tudo)
git add . = para adicionar todos os arquivos da pasta
git rm -- cached " " = em aspas nome do arquivo a ser removido do commit
rm -- cached . = para remover todos os arquivos da pasta do commit
git commit -m " " = em aspas o titulo do arquivo (para ter um controle de versão)
se modificar o arquivo, usar mesmo comando anterior, porém com titulo diferente (para ter um controle de versão)
git diff = para ver a diferença entre o que esta commitado e o que está apenas salvo
git diff --cached ou staged = para ver melhor
git log = listagem de todos os commits feitos, do mais recente para o mais antigo
q = quit para sair do ultimo comando feito
git log --oneline = hash (endereçamento) do commit e o titulo salvo
git lot -1 = esse número é o numero de commits que eu desejo ver na minha tela 
git log --online -1 = para diminuir a quantidade de informaçoes
git log -p = aparecem as atualizações dos commits
git log --stat = ver arquivos dos commits modificadoscm
git log --shortstat
git commit --amend -m " " = trocar titulo do ultimo commit
git commit --amend = abre um editor de texto para modificar o nome 
git commit --amend --no-edit = salva e commita um arquivo nao comitado sem trocar seu nome
git checkout " " = em aspas espaço de endereçamento das versões anteriores
git main = pra voltar ao principal, que no caso é o atual
git commit --amend = faz com que abra o editor de texto VISUALSTUDIO
git checkout "nome do arquivo.txt" = faz com que altere o arquivo para sua ultima VERSAO (só para arquivos commitados)
git clean = repara arquivos não rastreados
git clean -f = força e apaga arquivos não rastreados
git checkout . = apaga arquivos já rastreados e modificados
git rm --cached " " = em aspas o nome do arquivo em .txt = para remover arquivo da area de preparação
git restore --staged = so funciona se ja tiver pelo menos algum commit, pois precisa de um ponto de partida (HEAD)
git reset --hard = ignora tudo que esta acontecendo e limpar TUDO, menos arquivos irrastreaveis
touch .gitignore = cria arquivos do tipo gitignore
git update-index --skip-worktree "index.html" = atualizar o controle e nao considerar mais o arquivo em aspas
git update-index --no-skip-worktree "index.html" = para atualizar e reconsiderar o arquivo em aspas
cd .. = volta a pasta anterior
git clone "" "" = clona a pasta da primeira aspa em uma nova pasta escolhida por vc na segunda aspa
cd"nome da pasta"/ = viaja ate a pasta desejada
git remote add origin "url" = adiciona a url para salvar na nuvem o que vc faz, remotamente
git remote set-url origin "url" = para atualizar se caso mudar o nome do diretorio no github na pasta do diretorio.
git rebase -i HEAD~3 = para renomear um commit, no caso o ~3 é para aparecer os ultimos 3, podendo ser editado a qualquer momento
git status para ver justamente se há trabalho pendente a ser maandado para o servidor
git push = envia para o servidor tudo aquilo trabalhado em modo offline no bash
git pull = traz todas as informações de arquivos e trabalhos feitos remotamente para a maquina
usar o fork no github para pegar projetos publicos usaveis
ssh-keygen = para gerar uma chave de segunraça aleatoria
cd ~/.ssh/ = faz o bash ir ate a pasta ssh criada
start . = abre a pasta que esta navegada no bash
copia-se a chave para o github 
caso negue pois a pasta criada do ID pode ter outro nome, se o arquivo estiver em nuvem
caso negue usar comando eval $(ssh-agent)
ssh-add ~/.ssh/ o caminho "nome da pasta"
git push --set-upstream origin "nome da branch" = para enviar uma outra branch ao servidor remoto
git branch -d "nome da branch" = deleta a branch selecionada
git branch -D "nome da branch" = força a exclusao mesmo q apareça mensagem no git
git push --delete origin "nome da branch" = deleta a branch remota
git branch -m "nome novo da branch" = para mudar o nome da branch local
git log "nome da branch" --oneline = para ver o historico de commits de determinada 
git branch = para mostrar as branchs
git branch "" = para trocar de perfil de branch para a desejada
git checkout -b "nome desejado" = para criar uma branch e ja trocar de perfil
git switch - = troca para a ultima branch
git switch"" = troca para a branch desejada
git switch -c "" = cria e troca de branch
git checkout -f "" = faz a troca de branch porem nao leva junto arquivos modificados que nao foram salvos, desfazendo essas alteracoes
code . = abre os arquivos da pasta
git merge "branch" = faz com que traga os arquivos e atualizações da branch escrita para a branch que você esta.
git branch --no-merged = checka os arquivos que nao foram mergeados
git branch --merged = para checkar arquivos que foram mergeados
git merge --abort = para cancelar o merge
git reset --hard = para cancelar o merge
embaixo da lupa no visual code, tem como comparar as branchs caso dê conflito, no caso, em cada lado da branch aparece 3 pontinhos, onde da para escolher com qual branch prosseguir 
git tag "" = cria uma tag com o nome desejado localmente, na branch escolhida e no commit escolhido.
git tag -a -m "" = tag mais completa, annotated. leva uma mensagem a mais e o rastreio de quem criou a tag
git show "" = em aspas a versao da tag desejada, para ver quem criou a tag
git tag = para ver as tags do projeto
git tag -n = para ver a descrição das tags, no caso se for tag simples assumira o mesmo nome do commit
git push tag "" = para enviar a tag para o servior do github
git push --tags = para enviar todas as tags para o servidor do github
git checkout "nome da tag" = para viajar ao commit que esta com a tag desejada
git diff "v0 v1" = para fazer uma comparação entre as duas tags
git tag -d "" = em aspas o nome da tag, para deletar a tag desejada localmente
git push --delete origin ""= em aspas o nome da tag, para deletar a tag desejada remotamente
git stash = salva as mudanças feitas em branchs secundarias, as quais nao terminei e nao posso voltar à branch main com mudanças em salvar, portanto salva-se na memoria. SALVA APENAS ARQUIVOS RASTREADOS
git stash list = para ver as stashs salvas
git stash apply = para aplicar a stash salva
caso tenha mais de um stash salvo, o 0 sempre é o mais recente
git stash apply stash@{ } = para escolher qual stash usar, com seu respectivo numero no meio das chaves
git stash pop = para aplicar o ultimo stash criado e ja apagar instantaneamente
git stash pop stash@{ } = para aplicar o stash desejado e apaga-lo
git stash drop = apaga o ultimo stash criado
git stash drop stash@{ } = para apagar o stash desejado
git stash branch "nome da branch" = cria uma branch a partir do ultimo stash criado
git stash branch "nome da branch" stash@{ }= cria uma branch a partir do stash desejado
git revert "" = em aspas o endereçamento do commit que quer reverter, para reverter o commit à versão anterior
git revert "" --no-edit = para reverter a reversão
git reset --hard HEAD~1 = apaga o ultimo commit e posiciona o HEAD 1 commit atras.
git commit -a -m "" = para adicionar e commitar ao mesmo tempo
git reset --mixed HEAD~1 = desfaz commit porem ao usar git diff, da para ver as alteracoes, deixa as mudancas na area de trabalho
git reset --soft HEAD~1 = desfaz commit porem deixa as mudancas na area de preparacao
git push --force = caso faça alguma mudança de commit, revertendo e etc. meu repositorio local ficara diferente do remoto, possibilitando o caso de erro na hora de dar push futuramente para o servidor. entao se usa o comando para forçar o envio das mudanças para o remoto
git push --force-with-lease = força o envio para o repositorio remoto, porem so se nenhuma alteracao remota for perdida. 
git pull = quando tiver algo remotamente diferente do meu local para pegar os arquivos e depois dar um push. para nao ter que usar o force, pois pode dar uma divergencia ciclica
