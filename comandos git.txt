git status
clear
git config --global user.name " "
git config --global user.email " "
git config --list
ls  = listar arquivos da pasta
ls -a = listar arquivos ate mesmo escondidos
git init = inicializar o repositorio git em determinada pasta (para saber se foi criada, aparece em azul "master")
git config global init defaultBranch "master" = em aspas nome a ser declarado do repositorio
exit
git add " " = para adicionar determinado arquivo na comitação
rm -fr .git/ = para remover o repositorio e pasta git (removeria ate mesmo o historico e tudo)
git add . = para adicionar todos os arquivos da pasta
git rm -- cached " " = em aspas nome do arquivo a ser removido do commit
rm -- cached . = para remover todos os arquivos da pasta do commit
git commit -m " " = em aspas o titulo do arquivo (para ter um controle de versão)
se modificar o arquivo, usar mesmo comando anterior, porém com titulo diferente (para ter um controle de versão)
git diff = para ver a diferença entre o que esta commitado e o que está apenas salvo
git diff --cached ou staged = para ver melhor
git log = listagem de todos os commits feitos, do mais recente para o mais antigo
q = quit para sair do ultimo comando feito
git log --oneline = hash (endereçamento) do commit e o titulo salvo
git lot -1 = esse número é o numero de commits que eu desejo ver na minha tela 
git log --online -1 = para diminuir a quantidade de informaçoes
git log -p = aparecem as atualizações dos commits
git log --stat = ver arquivos dos commits modificadoscm
git log --shortstat
git commit --amend -m " " = trocar titulo do ultimo commit
git commit --amend = abre um editor de texto para modificar o nome 
git commit --amend --no-edit = salva e commita um arquivo nao comitado sem trocar seu nome
git checkout " " = em aspas espaço de endereçamento das versões anteriores
git main = pra voltar ao principal, que no caso é o atual
git commit --amend = faz com que abra o editor de texto VISUALSTUDIO
git checkout "nome do arquivo.txt" = faz com que altere o arquivo para sua ultima VERSAO (só para arquivos commitados)
git clean = repara arquivos não rastreados
git clean -f = força e apaga arquivos não rastreados
git checkout . = apaga arquivos já rastreados e modificados
git rm --cached " " = em aspas o nome do arquivo em .txt = para remover arquivo da area de preparação
git restore --staged = so funciona se ja tiver pelo menos algum commit, pois precisa de um ponto de partida (HEAD)
git reset --hard = ignora tudo que esta acontecendo e limpar TUDO, menos arquivos irrastreaveis
touch .gitignore = cria arquivos do tipo gitignore
git update-index --skip-worktree "index.html" = atualizar o controle e nao considerar mais o arquivo em aspas
git update-index --no-skip-worktree "index.html" = para atualizar e reconsiderar o arquivo em aspas
cd .. = volta a pasta anterior
git clone "" "" = clona a pasta da primeira aspa em uma nova pasta escolhida por vc na segunda aspa
cd"nome da pasta"/ = viaja ate a pasta desejada
git remote add origin "url" = adiciona a url para salvar na nuvem o que vc faz, remotamente
git remote set-url origin "url" = para atualizar se caso mudar o nome do diretorio no github na pasta do diretorio.
git rebase -i HEAD~3 = para renomear um commit, no caso o ~3 é para aparecer os ultimos 3, podendo ser editado a qualquer momento
git status para ver justamente se há trabalho pendente a ser maandado para o servidor
git push = envia para o servidor tudo aquilo trabalhado em modo offline no bash
git pull = traz todas as informações de arquivos e trabalhos feitos remotamente para a maquina
usar o fork no github para pegar projetos publicos usaveis
ssh-keygen = para gerar uma chave de segunraça aleatoria
cd ~/.ssh/ = faz o bash ir ate a pasta ssh criada
start . = abre a pasta que esta navegada no bash
copia-se a chave para o github 
caso negue pois a pasta criada do ID pode ter outro nome, se o arquivo estiver em nuvem
caso negue usar comando eval $(ssh-agent)
ssh-add ~/.ssh/ o caminho "nome da pasta"
git push --set-upstream origin "nome da branch" = para enviar uma outra branch ao servidor remoto
git branch -d "nome da branch" = deleta a branch selecionada
git branch -D "nome da branch" = força a exclusao mesmo q apareça mensagem no git
git push --delete origin "nome da branch" = deleta a branch remota
git branch -m "nome novo da branch" = para mudar o nome da branch local
git log "nome da branch" --oneline = para ver o historico de commits de determinada 
git branch = para mostrar as branchs
git branch "" = para trocar de perfil de branch para a desejada
git checkout -b "nome desejado" = para criar uma branch e ja trocar de perfil
git switch - = troca para a ultima branch
git switch"" = troca para a branch desejada
git switch -c "" = cria e troca de branch
git checkout -f "" = faz a troca de branch porem nao leva junto arquivos modificados que nao foram salvos, desfazendo essas alteracoes
code . = abre os arquivos da pasta
git merge "branch" = faz com que traga os arquivos e atualizações da branch escrita para a branch que você esta.
git branch --no-merged = checka os arquivos que nao foram mergeados
git branch --merged = para checkar arquivos que foram mergeados